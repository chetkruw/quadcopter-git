// Pthread includes
#include <pthread.h>
#include <time.h>
#include <unistd.h>
#include <sched.h>
#include <stdint.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
// ZED includes
#include "/usr/local/zed/include/sl/Camera.hpp"
#include "aruco.hpp"
#include <opencv2/opencv.hpp>
​
using namespace sl;
using namespace std;
​
#define ITERTIME 1000000000 // time of iteration
​
bool volatile running = true;
​
void *myfunc(void *) {
    //  keep track of the passage of time at a 5-millisecond quantized interval
    struct timespec last = {}, now = {};
    clock_gettime(CLOCK_MONOTONIC_RAW, &last);
​
    while (running) {
        clock_gettime(CLOCK_MONOTONIC_RAW, &now);
        //  5 milliseconds, as nanoseconds
        int64_t tosleep = ITERTIME - (now.tv_sec - last.tv_sec) * 1000000000 - (now.tv_nsec - last.tv_nsec);
        last.tv_nsec += ITERTIME;
        if (last.tv_nsec >= 1000000000) {
            last.tv_nsec -= 1000000000;
            last.tv_sec += 1;
        }
        if (tosleep > 2*ITERTIME) {
            //  missed by more than one full interval! re-set the clock basis
            last = now;
            tosleep = 0;
        }
        if (tosleep > 0) {
            struct timespec slp = {};
            slp.tv_nsec = (long)tosleep;
            nanosleep(&slp, NULL);
        }
​
        /* ---------- camera grab code ---------- */
        if (zed.grab(run_params) == ERROR_CODE::SUCCESS) {
            // Start Timer
	        clock_t ocv_t = clock();
		
	        // Retrieve the left image
            zed.retrieveImage(image_zed, VIEW::LEFT, MEM::CPU, image_size);
​
            // convert to RGB
            cv::cvtColor(image_ocv, image_ocv_rgb, cv::COLOR_RGBA2RGB);
            
	        ocv_t = clock();
	        // detect marker
            cv::aruco::detectMarkers(image_ocv_rgb, dictionary, corners, ids);
	        ocv_t = clock() - ocv_t;
            total_ocv_time += ocv_t;
​
            // get actual ZED position
            zed.getPosition(zed_pose);
​
            // display ZED position
            // cv::rectangle(image_ocv_rgb, cv::Point(0, 0), cv::Point(490, 75), cv::Scalar(0, 0, 0), -1);
            // cv::putText(image_ocv_rgb, "Loaded dictionary : 6x6.     Press 'SPACE' to reset the camera position", cv::Point(10, 15), cv::FONT_HERSHEY_SIMPLEX, 0.4, cv::Scalar(220, 220, 220));
            position_txt = "ZED  x: " + to_string(zed_pose.pose_data.tx) + "; y: " + to_string(zed_pose.pose_data.ty) + "; z: " + to_string(zed_pose.pose_data.tz);
	        // cv::putText(image_ocv_rgb, position_txt, cv::Point(10, 35), cv::FONT_HERSHEY_SIMPLEX, 0.6, cv::Scalar(236, 188, 26));
	        // cout << position_txt << endl;
	        // cout << to_string(count) << endl;
​
            // if at least one marker detected
            if (ids.size() > 0) {
                cv::aruco::estimatePoseSingleMarkers(corners, actual_marker_size_meters, camera_matrix, dist_coeffs, rvecs, tvecs);
                pose.setTranslation(sl::float3(tvecs[0](0), tvecs[0](1), tvecs[0](2)));
                pose.setRotationVector(sl::float3(rvecs[0](0), rvecs[0](1), rvecs[0](2)));
                pose.inverse();
                can_reset = true;
​
                // cv::aruco::drawDetectedMarkers(image_ocv_rgb, corners, ids);
                // cv::aruco::drawAxis(image_ocv_rgb, camera_matrix, dist_coeffs, rvecs[0], tvecs[0], actual_marker_size_meters * 0.5f);
                position_txt = "Aruco x: " + to_string(pose.tx) + "; y: " + to_string(pose.ty) + "; z: " + to_string(pose.tz);
                // cv::putText(image_ocv_rgb, position_txt, cv::Point(10, 60), cv::FONT_HERSHEY_SIMPLEX, 0.6, cv::Scalar(124, 252, 124));
		
                // store to buffer, converted as shown below
                if (xp < xbuffer+IMAX) {
                    *xp++ = pose.tx;
                    *yp++ = -pose.tz;
                    *zp++ = pose.ty;
                }	
                // need a way to store time to buffer
                // idea: timespec first = {}, then subtract current from first,
                // write to buffer of same length as IMAX
                // wait to do this until we make sure timer works!
	
                // print to console for now
                printf("x: %f, y: %f, z: %f\n",pose.tx,-pose.tz,pose.ty);
                
            } else 
                can_reset = false; // is this code going to break??? - Aaron
​
            // Display image
            // cv::imshow("Image", image_ocv_rgb);
​
            // if KEY_R is pressed and aruco marker is visible, then reset ZED position
            // if ((key == ' ') && can_reset)
            //     zed.resetPositionalTracking(pose);
        }
        /* ---------- end of grab code ---------- */
    }
​
    return NULL;
}
​
void sigint(int) {
    running = false;
}
​
int main() {
    /* ---------- ZED INIT ---------- */
     // Create a ZED camera object
    Camera zed;
​
    // Set configuration parameters
    InitParameters init_params;
    init_params.camera_resolution = RESOLUTION::VGA;
    init_params.camera_fps = 60;
    init_params.coordinate_units = UNIT::METER;
    init_params.sensors_required = false;
    init_params.depth_mode = DEPTH_MODE::PERFORMANCE;
​
    RuntimeParameters run_params;
    run_params.enable_depth = false;
​
    // Open the camera
    ERROR_CODE err = zed.open(init_params);
    if (err != ERROR_CODE::SUCCESS) {
        cout << "Error, unable to open ZED camera: " << err << "\n";
        zed.close();
        return 1; // Quit if an error occurred
    }
​
    auto cameraInfo = zed.getCameraInformation();
    Resolution image_size = cameraInfo.camera_resolution;
    Mat image_zed(image_size, MAT_TYPE::U8_C4);
    cv::Mat image_ocv = cv::Mat(image_zed.getHeight(), image_zed.getWidth(), CV_8UC4, image_zed.getPtr<sl::uchar1>(MEM::CPU));
    cv::Mat image_ocv_rgb;
​
    auto calibInfo = cameraInfo.calibration_parameters.left_cam;
    cv::Matx33d camera_matrix = cv::Matx33d::eye();
    camera_matrix(0, 0) = calibInfo.fx;
    camera_matrix(1, 1) = calibInfo.fy;
    camera_matrix(0, 2) = calibInfo.cx;
    camera_matrix(1, 2) = calibInfo.cy;
​
    cv::Matx<float, 4, 1> dist_coeffs = cv::Vec4f::zeros();
​
    float actual_marker_size_meters = 0.16f; // real marker size in meters
    auto dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_100);
​
    cout << "Make sure the ArUco marker is a 6x6 (100), measuring " << actual_marker_size_meters * 1000 << " mm" << endl;
​
    Transform pose;
    Pose zed_pose;
    vector<cv::Vec3d> rvecs, tvecs;
    vector<int> ids;
    vector<vector<cv::Point2f> > corners;
    string position_txt;
​
    bool can_reset = false;
​
    PositionalTrackingParameters tracking_params;
    tracking_params.enable_imu_fusion = false; // for this sample, IMU (of ZED-M) is disable, we use the gravity given by the marker.
    // zed.enablePositionalTracking(tracking_params);
​
    // Creating Buffers For Value Storing
    static int IMAX = 250; // max length of buffer
    double xbuffer[IMAX];
    double ybuffer[IMAX];
    double zbuffer[IMAX];
    double *xp = xbuffer;
    double *yp = ybuffer;
    double *zp = zbuffer;
​
    cout << "Starting Timing Check" << endl;
    int count = 0;
    float total_ocv_time = 0;
    clock_t t = clock();
    
    /* ---------- PTHREAD INIT ---------- */
    //  make sure ctrl-C stops the program under controlled circumstances
    signal(SIGINT, &sigint);
​
    //  create attributes for an isolated real-time thread
    pthread_attr_t attr = {};
    pthread_attr_init(&attr);
    //  lift the thread off core 0, which takes system interrupts
    cpu_set_t cpuset = {};
    CPU_ZERO(&cpuset);
    CPU_SET(1, &cpuset);
    pthread_attr_setaffinity_np(&attr, 1, &cpuset);
    //  make it use FIFO policy for real-time scheduling
    pthread_attr_setschedpolicy(&attr, SCHED_FIFO);
    pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);
    //  set the priority
    sched_param param = {};
    param.sched_priority = 30;
    pthread_attr_setschedparam(&attr, &param);
​
    //  create the real-time thread
    pthread_t mythread;
    int err;
    if ((err = pthread_create(&mythread, &attr, &myfunc, NULL)) != 0) {
        char const *emsg = ((err == EAGAIN) ? "EAGAIN" : ((err == EINVAL) ? "EINVAL" : ((err == EPERM) ? "EPERM" : "unknown")));
        fprintf(stderr, "pthread_create() failed (%d %s); are you sure you're root?\n", err, emsg);
        fprintf(stderr, "You may also need to do:\n");
        fprintf(stderr, "echo -1 > /proc/sys/kernel/sched_rt_runtime_us\n");
        exit(1);
    }
​
    //  wait for the program to be done
    void *ignore = NULL;
    pthread_join(mythread, &ignore);
​
    // teardown -> reference Lab8 for how to do this
​
    return 0;
}
